//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "embedding")]
pub struct Model {
	#[sea_orm(primary_key)]
	#[serde(skip_deserializing)]
	pub id: i32,
	pub vector: Option<Vec<f32>>,
	pub posting_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(
		belongs_to = "super::posting::Entity",
		from = "Column::PostingId",
		to = "super::posting::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Posting,
}

impl Related<super::posting::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Posting.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
